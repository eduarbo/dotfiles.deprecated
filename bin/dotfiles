#!/usr/bin/env bash

DOT="$HOME/.dotfiles"
DOT_TARBALL_PATH="https://github.com/eduarbo/dotfiles/tarball/master"
DOT_GIT_REMOTE="git@github.com:eduarbo/dotfiles.git"

if [[ "$1" == "-h" || "$1" == "--help" ]]; then

cat <<EOT
Usage: $(basename "$0") [options]

Options:
-h, --help           Print this help text
--no-packages        Do not install packages
--with-apps          Run caskbootstrap to install listed apps

Copyright (c) Eduardo Ruiz
Licensed under the MIT license.
EOT

  exit
fi

# Test for known flags
for opt in "$@"
do
  case $opt in
    --no-packages) _no_packages=true ;;
    --with-apps) _with_apps=true ;;
    -*|--*) e_warning "Warning: invalid option $opt" ;;
  esac
done

_link() {
  # Force create/replace the symlink.
  _backup "${HOME}/${2}"
  ln -fs "${DOT}/${1}" "${HOME}/${2}"
}

_backup() {
  # Backup directories if they are already there.
  if [[ -e "${1}" ]]; then
    [[ -e "${1}.old" ]] && rm -rf "${1}.old"
    mv "${1}" "${1}.old"
    printf "Moved \`${1}\` to \`${1}.old\`\n"
  fi
}

_mirrorfiles() {
  _link 'ctags' '.ctags'
  _link 'jshintrc' '.jshintrc'

  # Bash
  _link 'bash/bash_profile' '.bash_profile'
  _link 'bash/bashrc' '.bashrc'

  # Zsh
  _link 'zsh/zshrc' '.zshrc'
  _link 'zsh/zshenv' '.zshenv'

  # Vim
  _link 'vim' '.vim'

  # Emacs
  _link 'emacs.d' '.emacs.d'

  # Git
  _link 'git/gitattributes' '.gitattributes'
  _link 'git/gitignore' '.gitignore'

  # Tmux
  _link 'tmux' '.tmux'
  _link 'tmux/tmux.conf' '.tmux.conf'
  _link 'tmuxinator' '.tmuxinator'

  # Karabiner
  _link "karabiner/private.xml" "Library/Application Support/Karabiner/private.xml"
  _link "karabiner/org.pqrs.Karabiner.plist" "Library/Preferences/org.pqrs.Karabiner.plist"
  # Seil
  _link "karabiner/org.pqrs.Seil.plist" "Library/Preferences/org.pqrs.Seil.plist"

  # Copy `.gitconfig`.
  # Any global git commands in `~/.bash_profile.local` will be written to
  # `.gitconfig`. This prevents them being committed to the repository.
  rsync -avz --quiet ${DOT}/git/gitconfig  ${HOME}/.gitconfig

  # Link all binary files into ~/bin/ dir
  ln -fs "${DOT}/bin/*" "${HOME}/bin/"

  #Copy fonts to Fonts directory
  rsync -avz --quiet "${DOT}/fonts/*" "${HOME}/Library/Fonts"

  # Copy from source
  # cd ~/Library/Fonts && curl -fLo DroidSansMonoForPowerlinePlusNerdFileTypes.otf https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Meslo/S/Meslo%20LG%20S%20Regular%20for%20Powerline%20Plus%20Nerd%20File%20Types%20Plus%20Font%20Awesome%20Plus%20Octicons%20Plus%20Pomicons.otf
  e_success "Dotfiles update complete!"
}

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOT} ]]; then
  printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
  mkdir "${DOT}"
  # Get the tarball
  curl -fsSLo "${HOME}/dotfiles.tar.gz" "${DOT_TARBALL_PATH}"
  # Extract to the dotfiles directory
  tar -zxf "${HOME}/dotfiles.tar.gz" --strip-components 1 -C "${DOT}"
  # Remove the tarball
  rm -rf "${HOME}/dotfiles.tar.gz"
fi

cd "${DOT}"
source "./lib/utils"

# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
  e_error "The XCode Command Line Tools must be installed first."
  printf "  Download them from: https://developer.apple.com/downloads\n"
  printf "  Then run this script again: `~/.dotfiles/bin/dotfiles`\n"
  exit 1
fi

# Check for Homebrew
if ! type_exists 'brew'; then
    e_header "Installing Homebrew..."
    ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
fi

# Check for git
if ! type_exists 'git'; then
    e_header "Updating Homebrew..."
    brew update
    e_header "Installing Git..."
    brew install git
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
  e_header "Initializing git repository..."
  git init
  git remote add origin ${DOT_GIT_REMOTE}
  git fetch origin master
  # Reset the index and working tree to the fetched HEAD
  # (submodules are cloned in the subsequent sync step)
  git reset --hard FETCH_HEAD
  # Remove any untracked files
  git clean -fd
fi

# sync with the remote repository
e_header "Syncing dotfiles..."
# Pull down the latest changes
git pull --rebase origin master

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite some of your existing dotfiles."

if is_confirmed; then
  _mirrorfiles
else
  printf "Aborting...\n"
  exit
fi

# Install and update packages
if [[ ${_no_packages} ]]; then
  printf "Skipped package installations.\n"
else
  printf "Installing packages from many sources (Homebrew, pip, gem, npm), this will take some time...\n"
  # Install Homebrew formulae, node, python and ruby packages
  ./bin/bootstrap
fi

# Install OSX Apps
if [[ ${_with_apps} ]]; then
  printf "Installing Apps with Cask...\n"
  ./bin/caskbootstrap
  e_success "OSX Apps installation complete!"
else
  printf "Skipped Apps installations.\n"
fi

# Ask before potentially overwriting OS X defaults
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
    bash ./bin/osxdefaults
    e_success "OS X settings updated! You may need to restart."
else
    printf "Skipped OS X settings update.\n"
fi

if [[ ! ${_with_apps} ]]; then
  e_warning "If you want to install some common OSX Apps just run \`caskbootstrap\`"
fi

e_success "AWESOME! We have finished. It's time to change your default shell to ZSH. Don't forget to run \`brew doctor\`. Enjoy! ಠ‿ಠ"
_zsh=$(grep /zsh$ /etc/shells | tail -1)
if [[ -z "${_zsh}" ]]; then
  printf "Installing ZSH...\n"
  brew install zsh zsh-completions zsh-syntax-highlighting zsh-history-substring-search
  _zsh=$(grep /zsh$ /etc/shells | tail -1)
fi

chsh -s "${_zsh}"
