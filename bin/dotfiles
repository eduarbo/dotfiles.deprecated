#!/usr/bin/env bash

DOT="$HOME/.dotfiles"
DOT_TARBALL_PATH="https://github.com/eduarbo/dotfiles/tarball/master"
DOT_GIT_REMOTE="git@github.com:eduarbo/dotfiles.git"


####################################################################################
# # Help #
####################################################################################
if [[ "$1" == "-h" || "$1" == "--help" ]]; then

cat <<EOT
Usage: $(basename "$0") [options]

Options:
-h, --help           Print this help text
--with-apps          Run caskbootstrap to install listed OS X apps

Copyright (c) Eduardo Ruiz
Licensed under the MIT license.
EOT

  exit
fi

# Test for known flags
for opt in "$@"
do
  case $opt in
    --with-apps) _with_apps=true ;;
    -*|--*) e_warning "Warning: invalid option $opt" ;;
  esac
done


####################################################################################
# # Functions                                                                      #
####################################################################################
setup_pkg() {
  stow --adopt $1
  git checkout -- .
  stow -R $1
}


####################################################################################
# # Setup dotfiles repository                                                      #
####################################################################################
# If missing, download and extract the dotfiles repository
if [[ ! -d $DOT ]]; then
  printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
  mkdir "${DOT}"
  # Get the tarball
  curl -fsSLo "${HOME}/dotfiles.tar.gz" "${DOT_TARBALL_PATH}"
  # Extract to the dotfiles directory
  tar -zxf "${HOME}/dotfiles.tar.gz" --strip-components 1 -C "${DOT}"
  # Remove the tarball
  rm -rf "${HOME}/dotfiles.tar.gz"
fi

cd "$DOT"
source "./lib/utils"


####################################################################################
# # Check for dependencies                                                         #
####################################################################################
# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
  e_error "The XCode Command Line Tools must be installed first."
  printf "  Download them from: https://developer.apple.com/downloads\n"
  printf "  Then run this script again: \`~/.dotfiles/bin/dotfiles\`\n"
  exit 1
fi

# Check for Homebrew
if ! type_exists 'brew'; then
    e_header "Installing Homebrew..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

e_header "Updating Homebrew..."
brew update

# Install latest git version
if ! formula_exists 'git'; then
    e_header "Installing latest Git version..."
    brew install git
fi

# Install Stow to link config files
if ! formula_exists 'stow'; then
  e_header "Installing Stow..."
  brew install stow
fi

####################################################################################
# # Initialize the git repository if it's missing                                  #
####################################################################################
# Check if current directory is a repo
if ! $(git rev-parse --is-inside-work-tree &> /dev/null); then
  e_header "Initializing git repository..."
  git init
  git remote add origin $DOT_GIT_REMOTE
  git fetch origin master
  # Reset the index and working tree to the fetched HEAD
  # (submodules are cloned in the subsequent sync step)
  git reset --hard FETCH_HEAD
  # Remove any untracked files
  git clean -fd
fi

# sync with the remote repository
e_header "Syncing dotfiles..."
# Pull down the latest changes
git pull --rebase origin master


####################################################################################
# # Link dotfiles                                                                  #
####################################################################################
# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite some of your existing dotfiles."

if is_confirmed; then
  setup_pkg git

  setup_pkg bash

  setup_pkg zsh

  setup_pkg fish

  setup_pkg spacemacs
  git clone git@github.com:syl20bnr/spacemacs.git "$HOME/.emacs.d"

  setup_pkg vim

  setup_pkg python

  setup_pkg tmux

  setup_pkg linters

  setup_pkg fonts

  setup_pkg karabiner

  setup_pkg hammerspoon

  setup_pkg kwm

  e_success "Dotfiles update complete!"
else
  printf "Aborting...\n"
  exit
fi


####################################################################################
# # Install and update packages {{{                                                #
####################################################################################
echo
e_header "Installing packages from many sources (Homebrew, pip, gem, npm). This will take some time..."
$DOT/bin/bootstrap


####################################################################################
# # Install OS X defaults                                                          #
####################################################################################
# Ask before potentially overwriting OS X defaults
echo
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
    bash $DOT/bin/osxdefaults
    e_success "OS X settings updated! You may need to restart."
else
    printf "Skipped OS X settings update."
fi


####################################################################################
# # Setup default shell                                                            #
####################################################################################
_shell=zsh
_sh_path="$(which ${_shell})"

echo
# set default shell if it's not already done
if [[ $SHELL =~ ${_shell} ]]; then
  e_header "You are already running a ${_shell} shell. There is nothig more to do"
else
  e_header "It's time to change your default shell to $_shell..."
  chsh -s "${_sh_path}" "$(whoami)"
  e_header "Reloading shell to apply changes..."
  exec $_sh_path -l
fi


####################################################################################
# # Install OS X Apps                                                              #
####################################################################################
echo
if [[ ${_with_apps} ]]; then
  e_header "Installing Apps with Cask..."
  ./bin/caskbootstrap
  e_success "OS X Apps installation complete!"
else
  printf "Skipped Apps installations.\n"
  e_warning "If you want to install some common OS X Apps later just run \`caskbootstrap\`"
fi
