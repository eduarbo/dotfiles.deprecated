#!/usr/bin/env bash
source "$HOME/.dotfiles/lib/utils"

# Ask for the administrator password upfront.
sudo -v

# Keep-alive: update existing `sudo` time stamp until the script has finished.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

####################################################################################
# # List of packages                                                               #
####################################################################################
formulae=(
  'stow'
  'git'
  'coreutils' # GNU core utilities
  'openssl' # Remember to run `brew link openssl --force`
  'd-bus' # Required to compile Emacs from src

  'python'
  'python3'
  'ruby'
  'go'
  'lua'
  'ctags'
  'fzf'
  'moreutils'
  'findutils'
  'bash bash-completion'
  'zsh-completions zsh-syntax-highlighting zsh-history-substring-search'
  'fish'
  'tmux reattach-to-user-namespace'
  'emacs --with-cocoa --with-imagemagick --with-gnutls --with-librsvg'
  'macvim --HEAD --with-cscope --with-lua --with-luajit --with-override-system-vim'

  # Install more recent versions of some OS X tools.
  'homebrew/dupes/grep'
  'homebrew/dupes/openssh'

  'ag'
  'pandoc'
  'gnu-sed --with-default-names'
  'wget --with-iri'
  'rsync --default-names'
  'dark-mode'
  'ffmpeg'
  'git-lfs'
  'gtypist'
  'mercurial'
  'pgcli'
  'selecta'
  'libsass sassc'
  'cppcheck'
  'shellcheck checkbashisms'
  'screenfetch'
  'ispell'
  'trash'
)

gems=(
  sqlint
  pg_query
  tmuxinator
  pry
  pry-doc
  ruby_parser
  rubocop
)

node_packages=(
  bower
  gulp
  gulp-util
  gulp-sass
  ember-cli
  jsctags
  complete
  express
  js-beautify
  eslint
  babel-eslint
  eslint-config-airbnb
  eslint-plugin-react
  tern
  # elm # Use the official installer for now as there are issues with elm-reactor in
  # OS X. See: https://github.com/kevva/elm-bin/issues/28
  elm-oracle
  # Not sure if eslint covers json files
  jsonlint
)

pip_packages=(
  flake8
  jedi
  ipython
)


####################################################################################
# # Install Homebrew Formulae                                                      #
####################################################################################
e_header "Updating Homebrew..."
# Use the latest version of Homebrew
brew update
[[ $? ]] && e_success "Done"

e_header "Updating any existing Homebrew formulae..."
# Upgrade any already-installed formulae
brew upgrade --all
[[ $? ]] && e_success "Done"

brew tap homebrew/dupes
brew tap homebrew/versions

e_header "Installing Homebrew formulae..."
for index in ${!formulae[*]}; do
  # Using eval to evaluate parameters in the list
  eval "brew install ${formulae[$index]}"
done

# Remove outdated versions from the Cellar
brew cleanup
# Link recently installed applications
brew linkapps


####################################################################################
# Set up installed apps                                                            #
####################################################################################
setup_shell() {
  _shell=$1

  if ! formula_exists ${_shell}; then
    echo
    e_header "Installing latest version of ${_shell}..."
    brew install ${_shell}
  fi
  _sh_path="$(which ${_shell})"

  # Check if $_shell is added in /etc/shells otherwise add it
  if [ -z $(grep /${_shell}$ /etc/shells | tail -1) ]; then
    echo
    e_header "Adding ${_sh_path} to /etc/shells (so that chsh will consider it a 'safe' shell)..."
    echo ${_sh_path} | sudo tee -a /etc/shells > /dev/null
  fi
}

# Bash
setup_shell bash

# Zsh
setup_shell zsh
rm -rf $HOME/.zcompdump

# Fish
setup_shell fish

# Tmux
# Install tmux plugins
~/.tmux/plugins/tpm/bin/install_plugins


####################################################################################
# # Install Ruby Gems                                                              #
####################################################################################
echo
if ! type_exists 'gem'; then
  e_error "Error: RubyGems not found."
else
  e_header "Installing Gems..."
  for index in ${!gems[*]}; do
    gem install "${gems[$index]}"
  done
fi


####################################################################################
# # Install Node packages                                                          #
####################################################################################
if ! type_exists 'nvm'; then
  echo
  if ! formula_exists 'nvm'; then
    e_header "Installing NVM..."
    brew install nvm
  fi
  e_header "Set up NVM..."
  mkdir ~/.nvm
  source_file /usr/local/opt/nvm/nvm.sh
fi

if ! type_exists 'node'; then
  echo
  e_header "Installing Node..."
  nvm install node
  nvm use node
  nvm alias default node
fi

echo
if ! type_exists 'npm'; then
  e_error "Error: npm not found."
else
  e_header "Installing Node Packages..."
  for index in ${!node_packages[*]}; do
    # Install packages globally and quietly
    npm install "${node_packages[$index]}" -g >/dev/null
  done
fi


####################################################################################
# # Install Python packages                                                        #
####################################################################################
echo
if ! type_exists 'pip'; then
  e_error "Error: Pip not found."
else
  e_header "Upgrading pip..."
  pip install --upgrade pip
  echo
  e_header "Installing Python packages..."
  for index in ${!pip_packages[*]}; do
    sudo pip install "${pip_packages[$index]}"
  done
fi

e_success "Done"
