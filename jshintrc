{
    "maxerr"        : 50,     // {int} Maximum error before stopping

    // == Enforcing Options ===============================================
    //
    // These options tell JSHint to be more strict towards your code. Use
    // them if you want to allow only a safe subset of JavaScript, very
    // useful when your codebase is shared with a big number of developers
    // with different skill levels.


    "bitwise"       : true,   // true: Prohibit bitwise operators (&, |, ^, etc.)
    "camelcase"     : false,  // true: Identifiers must be in camelCase
    "curly"         : true,   // true: Require {} for every new block or scope
    "eqeqeq"        : true,   // true: Require triple equals (===) for comparison
    "forin"         : false,   // true: Require filtering for..in loops with obj.hasOwnProperty()
    "freeze"        : true,   // true: prohibits overwriting prototypes of native objects such as Array, Date etc.
    "immed"         : true,   // true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`
    "indent"        : 4,      // {int} Number of spaces to use for indentation
    "latedef"       : true,   // true: Require variables/functions to be defined before being used
    "newcap"        : true,   // true: Require capitalization of all constructor functions e.g. `new F()`
    "noarg"         : true,   // true: Prohibit use of `arguments.caller` and `arguments.callee`
    "noempty"       : true,   // true: Prohibit use of empty blocks
    "nonbsp"        : true,   // true: Prohibit "non-breaking whitespace" characters.
    "nonew"         : true,   // true: Prohibit use of constructors for side-effects (without assignment)
    "plusplus"      : false,  // true: Prohibit use of `++` & `--`
    "quotmark"      : false,  // Quotation mark consistency:
                              //    false    : do nothing (default)
                              //    true     : ensure whatever is used is consistent
                              //    "single" : require single quotes
                              //    "double" : require double quotes
    "regexp"        : false,  // true: Prohibit `.` and `[^...]` in regular expressions.
    "undef"         : true,   // true: Require all non-global variables to be declared (prevents global leaks)
    "unused"        : "vars", // true: Require all defined variables be used
    "strict"        : true,   // true: Requires all functions run in ES5 Strict Mode
    "trailing"      : true,   // true: Prohibit trailing whitespaces
    "maxparams"     : false,  // {int} Max number of formal params allowed per function
    "maxdepth"      : false,  // {int} Max depth of nested blocks (within functions)
    "maxstatements" : false,  // {int} Max number statements per function
    "maxcomplexity" : false,  // {int} Max cyclomatic complexity per function
    // "maxlen"        : 80,     // {int} Max number of characters per line

    // == Relaxing Options ================================================
    //
    // These options allow you to suppress certain types of warnings. Use
    // them only if you are absolutely positive that you know what you are
    // doing.

    "asi"           : false,  // true: Tolerate Automatic Semicolon Insertion (no semicolons)
    "boss"          : false,  // true: Tolerate assignments where comparisons would be expected
    "debug"         : false,  // true: Allow debugger statements e.g. browser breakpoints.
    "eqnull"        : false,  // true: Tolerate use of `== null`
    "esnext"        : false,  // true: Allow ES.next (ES6) syntax (ex: `const`, `let`)
    "moz"           : false,  // true: Allow Mozilla specific syntax (extends and overrides esnext features)
                              //    (ex: `for each`, multiple try/catch, function expression…)
    "evil"          : false,  // true: Tolerate use of `eval` and `new Function()`
    "expr"          : true,  // true: Tolerate `ExpressionStatement` as Programs
    "funcscope"     : false,  // true: Tolerate defining variables inside control statements
    "globalstrict"  : false,  // true: Allow global "use strict" (also enables 'strict')
    "iterator"      : false,  // true: Tolerate using the `__iterator__` property
    "lastsemic"     : true,   // true: Tolerate omitting a semicolon for the last statement of a 1-line block
    "laxbreak"      : false,  // true: Tolerate possibly unsafe line breakings
    "laxcomma"      : false,  // true: Tolerate comma-first style coding
    "loopfunc"      : false,  // true: Tolerate functions being defined in loops
    "multistr"      : false,  // true: Tolerate multi-line strings
    "noyield"       : false,  // true: Tolerate generator functions with no yield statement in them.
    "notypeof"      : false,  // true: Tolerate invalid typeof operator values
    "onecase"       : false,   // Tolerate switches with just one case.
    "proto"         : false,  // true: Tolerate using the `__proto__` property
    "regexdash"     : false,  // true: Tolerate unescaped last dash i.e. `[-...]`.
    "scripturl"     : false,  // true: Tolerate script-targeted URLs
    "smarttabs"     : false,  // true: Tolerate mixed tabs/spaces when used for alignment
    "shadow"        : false,  // true: Allows re-define variables later in code e.g. `var x=1; x=2;`
    "sub"           : true,  // true: Tolerate using `[]` notation when it can still be expressed in dot notation
    "supernew"      : false,  // true: Tolerate `new function () { ... };` and `new Object;`
    "validthis"     : false,  // true: Tolerate using this in a non-constructor function

    // == Environments ====================================================
    //
    // These options pre-define global variables that are exposed by
    // popular JavaScript libraries and runtime environments—such as
    // browser or node.js.

    "browser"       : true,   // Web Browser (window, document, etc)
    "browserify"    : false,  // Browserify (node.js code in the browser)
    "couch"         : false,  // CouchDB
    "devel"         : true,   // Development/debugging (alert, confirm, console, etc)
    "dojo"          : false,  // Dojo Toolkit
    "jasmine"       : false,  // Jasmine
    "jquery"        : true,   // jQuery
    "mocha"         : true,   // Mocha
    "mootools"      : false,  // MooTools
    "node"          : false,  // Node.js
    "nonstandard"   : false,  // Widely adopted globals (escape, unescape, etc)
    "prototypejs"   : false,  // Prototype and Scriptaculous
    "qunit"         : false,  // QUnit
    "rhino"         : false,  // Rhino
    "shelljs"       : false,  // ShellJS
    "worker"        : false,  // Web Workers
    "wsh"           : false,  // Windows Scripting Host
    "yui"           : false,  // Yahoo User Interface

    // == JSLint Legacy ===================================================
    //
    // These options are legacy from JSLint. Aside from bug fixes they will
    // not be improved in any way and might be removed at any point.

    "nomen"         : false,  // true: Prohibit dangling `_` in variables
    "onevar"        : true,   // true: Allow only one `var` statement per function
    "passfail"      : false,  // true: Stop on first error
    "white"         : true,   // true: Check against strict whitespace and indentation rules

    // == Undocumented Options ============================================
    "-W041"         : false,  // false: Ignore error Use '!==' to compare with ''

    // == Custom Globals ==================================================
    "globals"       : {      // additional predefined global variables
        "EzRez": true,
        "Ember": false,
        "App": true,
        "DS": false,
        "moment": false,
        "TestUtils": false,
        "server": false,
        "expect": false,
        "_": false,
        "Handlebars": false
    }
}
// vim: set ft=json syntax=javascript :
