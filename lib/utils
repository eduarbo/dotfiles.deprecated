export DOT="$HOME/.dotfiles"
export OS_NAME="$(uname)"

lazy_source () {
  eval "$1 () { [ -f $2 ] && source $2 && $1 \$@ }"
}

# source and evaluate a command if it is passed as second argument
source_file () {
  [[ -s "$1" ]] && source "$1"
  [[ "$2" && "$(type -p "$2")" ]] && eval "$2"
}

# Header logging
e_header() {
  printf "\n$(tput setaf 7)%s$(tput sgr0)\n" "$@"
}

# Success logging
e_success() {
  printf "$(tput setaf 64)âœ“ %s$(tput sgr0)\n" "$@"
}

# Error logging
e_error() {
  printf "$(tput setaf 1)x %s$(tput sgr0)\n" "$@"
}

# Warning logging
e_warning() {
  printf "$(tput setaf 136)! %s$(tput sgr0)\n" "$@"
}

# Ask for confirmation before proceeding
seek_confirmation() {
  printf "\n"
  e_warning "$@"
  read -p "Continue? (y/n) " -n 1
  printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
  [[ "$REPLY" =~ ^[Yy]$ ]] && return 0
  return 1
}

# Test whether we're in a git repo
is_git_repo() {
  $(git rev-parse --is-inside-work-tree &> /dev/null)
}

# Test whether a command exists
# $1 - cmd to test
type_exists() {
  [[ "$(type -p $1)" ]] && return 0
  return 1
}

# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
formula_exists() {
  if "$(brew list $1 >/dev/null)"; then
    printf "%s already installed.\n" "$1"
    return 0
  fi

  e_warning "Missing formula: $1"
  return 1
}

if [[ "$OS_NAME" == 'Linux' ]]; then
  export IS_LINUX=1
fi

if [[ "$OS_NAME" == 'Darwin' ]]; then
  export IS_MAC=1
fi

if [[ -x "$(which brew)" ]]; then
  export HAS_BREW=1
  # BREW_LOCATION=`brew --prefix`
  export BREW_LOCATION="/usr/local"
elif [[ -x "$(which apt-get)" ]]; then
  export HAS_APT=1
elif [[ -x "$(which yum)" ]]; then
  export HAS_YUM=1
fi

# vim: set ft=zsh :
