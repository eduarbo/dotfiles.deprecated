set nocompatible
filetype off

set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_DATA_HOME/vim,$XDG_CACHE_HOME/vim,$VIM,$VIMRUNTIME

" Download vim-plug if missing
if empty(glob('$XDG_DATA_HOME/vim/autoload/plug.vim'))
    silent !curl -fsLo $XDG_DATA_HOME/vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * silent! PlugInstall --sync | q | source $MYVIMRC
endif

call plug#begin('$XDG_DATA_HOME/vim/bundle')
" Plugins {{{
    " Essentials
    Plug 'tpope/vim-sensible'
    " Workaround to overwrite vim-sensible settings
    call plug#load('vim-sensible')

    Plug 'Shougo/vimproc', { 'do': 'make' }
    Plug 'editorconfig/editorconfig-vim'
    Plug 'tpope/vim-fugitive'    " git in vim
    Plug 'sheerun/vim-polyglot'  " support for a variety of languages
    " Vim functionality fixes/enhancements
    Plug 'tpope/vim-repeat'      " better repeat compatibility ('.')
    Plug 'vim-scripts/vis'       " improved visual commands
    " kill buffers without affecting window layout
    Plug 'moll/vim-bbye', { 'on': ['Bdelete', 'Bclose'] }
    " Communicating with Tmux
    Plug 'christoomey/vim-tmux-navigator'
    " Theme
    Plug 'joshdick/onedark.vim'
" }}}

" Custom code & extra configuration
runtime! core/*.vim
" runtime! tools/*.vim

call plug#end()
syntax on
filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""
" Settings                             "
""""""""""""""""""""""""""""""""""""""""
set fileencoding=utf-8
set fileencodings=utf-8

set bomb
set binary
if has('termguicolors')
    set termguicolors
endif
if has('ttimeout')
    set ttimeout
    set ttimeoutlen=0
endif

" Swap files, history & persistence {{{
    " No backup (that's what git is for!) and swapfiles are annoying
    set nobackup
    set nowritebackup
    set noswapfile
    if has('persistent_undo')
        set undodir=$XDG_DATA_HOME/vim/undo
        set undolevels=500
        set undoreload=500
    endif
    set history=5000

    " preserve buffer state (cursor location, folds, etc.)
    set viewdir=$XDG_DATA_HOME/vim/views
    set viewoptions=cursor,folds,unix,slash
    augroup vimrc-persistence
        au!
        au BufWinLeave * if expand("%") != "" | silent! mkview | endif
        au BufWinEnter * if expand("%") != "" | silent! loadview | endif
    augroup END
" }}}

set fileformats+=mac
set hidden                   " Allow buffer switching without saving
set lazyredraw               " Don't update screen while running macros
set ttyfast
set noeol
set nospell                  " No spell check, please
set shortmess+=filmnrxoOtTs
set visualbell               " No sounds!
set t_vb=                    " Stop flashing
set modeline

set iskeyword-=.             " Regard . as a word boundary
set iskeyword-=_             " Regard _ as a word boundary
set iskeyword-=#             " Regard # as a word boundary

" Show buffer name in tmux window name
set titlestring=%f%m
set title

" Disable matchit highlighting, I find it distracting
let loaded_matchparen = 1

" Switch to current file directory
autocmd BufEnter * silent! lcd %:p:h

" Automatically close the popup menu / preview window
au InsertLeave * if pumvisible() == 0|silent! pclose|endif

" Do syntax highlighting from the start
au BufEnter * :syntax sync fromstart

" Enable clipboard
if has('unnamedplus')
    set clipboard=unnamed,unnamedplus
else
    set clipboard=unnamed
endif

augroup vimrc-remember-cursor-position
    au!
    au BufWinEnter * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

    " Instead of reverting the cursor to the last position in the buffer, we
    " set it to the first line when editing a git commit message
    au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
augroup END

" UI/Appearance {{{
    set background=dark
    set number           " Line numbers
    set showcmd          " Show command issued
    set fillchars=vert:â”‚
    set list
    set textwidth=80
    " set cursorline     " Line highlight

    " StatusBar
    set rulerformat=%30(%=%y%m%r%w\ %l,%c%V\ %P%)
    if has('statusline')
        set statusline=\ %F
        set statusline+=\ %W%H%M%R                     " Options
        set statusline+=%=                             " left/right separator
        set statusline+=\ %{fugitive#statusline()}     " Git Hotness
        set statusline+=\ %c                           " cursor column
        set statusline+=\ %l/%L                        " cursor line/total lines
        set statusline+=\ \:%P                         " percent through file
        set statusline+=\ %Y                           " filetype
    endif

    " No background in terminal
    if has("autocmd") && !has("gui_running")
        let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }
        autocmd ColorScheme * call onedark#set_highlight("Normal", { "fg": s:white }) " No `bg` setting
    end


    let &t_SI = "\e[5 q"
    let &t_EI = "\e[1 q"

    " All cursor options:
    " 0 -> blinking block
    " 1 -> blinking block (default)
    " 2 -> steady block
    " 3 -> blinking underline
    " 4 -> steady underline
    " 5 -> blinking bar (xterm)
    " 6 -> steady bar (xterm)

    colorscheme onedark
" }}}

" Movement & search {{{
    set nostartofline
    set scrolloff=10
    set hlsearch             " Highlight search terms
    set ignorecase           " case insensitive search
    set smartcase            " case sensitive when uc present
    set gdefault             " global flag for substitute by default

    if executable('ag')
        let g:ackprg = 'ag --nogroup --nocolor --column'
        set grepprg=ag\ --nogroup\ --nocolor
    elseif executable('ack-grep')
        let g:ackprg = "ack-grep -H --nocolor --nogroup --column"
    endif
" }}}

" Text formatting {{{
    set expandtab
    set shiftround
    set shiftwidth=4 tabstop=4 softtabstop=4
    set nowrap
    " Backspace and cursor keys to wrap
    set whichwrap=b,s,h,l,<,>,[,]
    " see :h fo-table
    set formatoptions=qrn1lr

    function! <SID>StripTrailingWhitespaces()
        if &ft =~ 'vim'
            return
        endif
        let l = line(".")
        let c = col(".")
        %s/\s\+$//e
        call cursor(l, c)
    endfunction
    autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
" }}}

" Folding {{{
    set foldlevel=1
    " Cleaner, more readable fold headers
    set foldtext=MyFoldText()
    function! MyFoldText()
        let line = getline(v:foldstart)
        " Lines that have been folded
        let nl = v:foldend - v:foldstart + 1
        let indent = repeat(' ', indent(v:foldstart))
        let endcol = &colorcolumn ? &colorcolumn : &textwidth
        let startcol = &columns < endcol ? &columns-4 : endcol
        return indent . substitute(line,"^ *","",1)
    endfunction
" }}}

" Omnicomplete + wild settings {{{
    set tags=./tags,./../tags,./../../tags,./../../../tags,tags

    set completeopt=menu
    set wildmode=list:longest,full  " command <Tab> completion: list
                                    " matches -> longest common -> then
                                    " all.
    set wildignore+=*.swp,*.log,.sass-cache,.codekit-cache,config.codekit
    set wildignore+=*.class,*.o,*.pyc,*.obj,*DS_Store*
" }}}

" vim:set fdl=0 fdm=marker:
