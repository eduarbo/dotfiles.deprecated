

# Capitalized, short (50 chars or less) summary
#
# Refer to issue #<IssueId>
#
# More detailed explanatory text, if necessary. Wrap it to 72 characters.
# This should answer:
#
# * Why was this change necessary?
# * How does it address the problem?
# * Are there any side effects?
#
# Add co-authors if you worked on this code with others:
#
# Co-authored-by: Full Name <email@example.com>
# Co-authored-by: Full Name <email@example.com>
#
#
# DO:
# * Write the summary line and description of what you have done in the
#   imperative mode. Start the line with "Fix", "Add", "Change" instead of
#   "Fixed", "Added", "Changed". This convention matches up with commit messages
#   generated by commands like git merge and git revert.
#
# DON'T:
# * Don't end the summary line with a period - it's a title and titles don't end
#   with a period.
#
# TIPS:
# * If it seems difficult to summarize what your commit does, it may be because it
#   includes several logical changes or bug fixes, and are better split up into
#   several commits using git add -p.
# * If the commit refers to an issue, add this information to the commit message
#   body. GitHub automatically converts issue ids to links referring to the
#   related issue. e.g. Fix #123, #124.
#   The following keywords, followed by an issue number, will close the issue:
#   - close
#   - closes
#   - closed
#   - fix
#   - fixes
#   - fixed
#   - resolve
#   - resolves
#   - resolved
