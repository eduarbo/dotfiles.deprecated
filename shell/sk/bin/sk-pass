#!/usr/bin/env bash

#
# Prompts for a pass entry, then for a specific field. Similar to passmenu, but
# uses sk, and can resume from a previous session.
#
# Example: sk-pass [RESUME]
#

set -e
shopt -s nullglob globstar

if [[ $1 == -r ]]; then
    resume=1; shift
fi
url=$@

LAST_ENTRY_FILE=/tmp/_upm
if [[ -n $resume && -f $LAST_ENTRY_FILE ]]; then
  entry="$(<$LAST_ENTRY_FILE)"
else
  prefix=${PASSWORD_STORE_DIR-~/.password-store}
  password_files=( "$prefix"/**/*.gpg  )
  password_files=( "${password_files[@]#"$prefix"/}"  )
  password_files=( "${password_files[@]%.gpg}" )
  entry=$(printf "%s\n" "${password_files[@]}" | sk --query="$url" --prompt='pass > ')
fi

if [[ -z $entry ]]; then
  notify-send --urgency=critical "Failed to select $entry"
  exit 1
fi

echo "$entry" >/tmp/_upm
secrets="$(pass show "$entry")"
if [[ -n $secrets ]]; then
  fields=$(awk -F': ' 'NR>1 && !/^otpauth:/ {print $1}' <<<"$secrets")
  field=$(printf "password\n%s\notp\n" "${fields[@]}" | sk --prompt="pass ($entry) > ")
  case $field in
    password) printf "%s" "$(head -n1 <<<"$secrets")" ;;
    otp) printf "%s" "$(pass otp "$entry")" ;;
    *) printf "%s" "$(awk -v "key=$field:" '$1 == key {print $2}' <<<"$secrets")" ;;
  esac | xsel -i -b -t 15000
  notify-send --urgency=low "<b>$entry -> $field</b>" "Copied to clipboard for 15s"
else
  notify-send --urgency=critical "Failed to retrieve $entry"
  exit 2
fi
