#!/usr/bin/env bash
source "$HOME/.dotfiles/lib/utils"

# Ask for the administrator password upfront.
sudo -v

# Keep-alive: update existing `sudo` time stamp until the script has finished.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

####################################################################################
# # List of packages                                                               #
####################################################################################
gems=(
)

node_packages=(
)

pip_packages=(
)


# Zsh
setup_shell zsh
rm -rf $HOME/.zcompdump

# Fish
setup_shell fish

# nvm
mkdir ~/.nvm
source_file $BREW_LOCATION/opt/nvm/nvm.sh

# Tmux
e_header "Installing Tmux Plugins..."
~/.tmux/plugins/tpm/bin/install_plugins

e_success "Done"


####################################################################################
# # Install Ruby Gems                                                              #
####################################################################################
source_file $BREW_LOCATION/opt/chruby/share/chruby/chruby.sh

echo
# Install gems only if chruby and ruby-install are installed
if ! type_exists 'chruby'; then
  e_error "Error: chruby not found."
elif ! type_exists 'ruby-install'; then
  e_error "Error: ruby-install not found."
else
  # Check for rubies in Chruby RUBIES paths or install latest ruby
  if ! [ "$(chruby | grep ruby)" ]; then
    e_header "Installing Ruby..."
    ruby-install ruby
  fi

  # Pick latest ruby version installed
  chruby ruby

  if ! type_exists 'gem'; then
    e_error "Error: RubyGems not found."
  else
    e_header "Installing Gems..."
    # Cache gem list
    _gem_list=$(gem list)

    for index in ${!gems[*]}; do
      _gem=${gems[$index]}

      # Install only missing gems
      ! test "$(echo $_gem_list | grep $_gem)" && gem install "$_gem"
    done

    # Update installed gems to the latest version
    gem update

    # Clean up old versions of installed gems
    gem cleanup
    e_success "Done"
  fi
fi


####################################################################################
# # Install Node packages                                                          #
####################################################################################
echo
if ! type_exists 'nvm'; then
  e_error "Error: nvm not found."
elif ! type_exists 'node'; then
  e_header "Installing Node..."
  nvm install node
  nvm use node
  nvm alias default node
fi

echo
if ! type_exists 'npm'; then
  e_error "Error: npm not found."
else
  e_header "Installing Node Packages..."
  for index in ${!node_packages[*]}; do
    # Install packages globally and quietly
    npm install "${node_packages[$index]}" -g >/dev/null
  done
  e_success "Done"
fi


####################################################################################
# # Install Python packages                                                        #
####################################################################################
echo
if ! type_exists 'pip'; then
  e_error "Error: Pip not found."
else
  e_header "Upgrading pip..."
  pip install --upgrade pip
  echo
  e_header "Installing Python packages..."
  for index in ${!pip_packages[*]}; do
    sudo pip install "${pip_packages[$index]}"
  done
  e_success "Done"
fi
