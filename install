#!/usr/bin/env bash

DOT="$HOME/.dotfiles"
source "$DOT/bash/lib/utils"

stow_pkg() {
  LINKS=$(stow -d $DOT -t $HOME -nv --adopt $1 2>&1 | sed '$d')

  if [[ -n "$LINKS" ]]; then
    e_warning "Warning: The following files may be overwriten"
    echo "$LINKS"
    seek_confirmation "Are you sure want to continue?"

    if is_confirmed; then
      echo "==> Starting symlink of $1 dotfiles"
      stow -d $DOT -t $HOME --adopt $1
      git checkout $DOT/$1
      stow -R $1
    else
      printf "Aborting installation of package $1...\n"
    fi
  fi
}

install_deps() {
  deps="$package_path/deps"
  if [[ -f "$deps" ]]; then
    echo "==> Starting installation of dependencies"
    ponle --file "$deps"
  fi
}

setup_pkg() {
  if [[ -f "$package_path/setup" ]]; then
    echo "==> Starting set up of $1 package"
    bash $package_path/setup
  fi
}

install() {
  package_path="$DOT/$1"

  if [[ -d $package_path ]]; then
    e_header "Installing $1 package..."

    stow_pkg $1
    install_deps $1
    setup_pkg $1

    e_success "$1 package installed successfully"
  else
    e_error "'$1' package was not found"
  fi
}

install_macos_defaults() {
  # Ask before potentially overwriting MacOS defaults
  case $(uname) in
    Darwin) ISMACOS=1 ;;
    Linux) ISLINUX=1 ;;
  esac

  if [ ! -f $DOT/.macosdefaultsinstalled ] && [ $(uname) == Darwin ]; then
    seek_confirmation "Do you want to install MacOS defaults?.
  Warning: This step may modify your MacOS system defaults."

    if is_confirmed; then
      echo
      bash $DOT/bin/macosdefaults
      touch $DOT/.macosdefaultsinstalled
      e_success "MacOS settings updated! You may need to restart."
    else
      printf "Skipped MacOS settings update."
    fi
  fi
}

ponle() {
  ponle="$HOME/bin/ponle"
  if [[ ! -x "$ponle" ]]; then
    e_header "Downloading ponle script..."
    curl --create-dirs -o "$ponle" -H "Cache-Control: no-cache" \
         https://raw.githubusercontent.com/eduarbo/ponle/master/ponle
    chmod +x "$ponle"
  fi
  $ponle "$@"
}

install_if_missing() {
  if ! type_exists "$1"; then
    e_header "Installing $1..."
    ponle "$1"
  fi
}

setup_pip() {
  install_if_missing python
  install_if_missing python3
  # Upgrade pip and setuptools
  ponle pip:pip pip:setuptools
}

setup_npm() {
  source_file $BREW_LOCATION/opt/nvm/nvm.sh
  install_if_missing nvm
  [[ ! -d "$HOME/.nvm" ]] && mkdir ~/.nvm

  if ! type_exists 'npm'; then
    e_header "Installing Node..."
    nvm install node
    nvm use node
    nvm alias default node
  fi
}

setup_gem() {
  source_file $BREW_LOCATION/opt/chruby/share/chruby/chruby.sh
  install_if_missing chruby
  install_if_missing ruby-install

  # Install gems only if chruby and ruby-install are installed
  if ! type_exists 'ruby-install'; then
    e_error "Error: ruby-install not found."
  else
    # Check for rubies in Chruby RUBIES paths or install latest ruby
    if [[ ! $(chruby | grep ruby) ]]; then
      e_header "Installing latest Ruby..."
      ruby-install --no-reinstall ruby
    fi

    # Pick latest ruby version installed
    source_file $BREW_LOCATION/opt/chruby/share/chruby/chruby.sh
    chruby ruby
  fi
}

e_warning "Some commands (like 'apt') need to be run with elevated privileges.
Let's ask for sudo upfront"

# Ask for the administrator password upfront.
sudo -v

# Keep-alive: update existing `sudo` time stamp until the script has finished.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# Basic setup
install_if_missing git
install_if_missing stow
setup_pip
setup_npm
setup_gem
ln -sf $DOT/.stow-global-ignore $HOME

if [[ $# -eq 0 ]]; then
  exit 0
fi

for package in "$@"; do
  install $package
done
install_macos_defaults
